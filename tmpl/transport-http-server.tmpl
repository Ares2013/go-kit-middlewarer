// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package transport

import(
	"net/http"

	"golang.org/x/net/context"

	ep "github.com/go-kit/kit/endpoint"
	httptransport "github.com/go-kit/kit/transport/http"

	"{{.BasePackage}}"
	"{{.EndpointPackage}}"
)

type toEndpoint func({{.BasePackageName}}.{{.InterfaceName}}) ep.Endpoint

// ServerLayer is a wrapper for {{.BasePackage}}.{{.InterfaceName}} which returns a
// github.com/go-kit/kit/endpoint.Middleware.  This allows you to specify
// Middleware while creating HTTP Servers.
type ServerLayer func( base {{.BasePackageName}}.{{.InterfaceName}}, path string ) ep.Middleware

func epID( ep ep.Endpoint ) ep.Endpoint {
	return ep
}

// HTTPServersForEndpoints will take the given arguments, associate all of
// the proper endpoints together, and register itself as an HTTP handler for
// {{.BasePackage}}.{{.InterfaceName}}
func HTTPServersForEndpoints( {{.InterfaceNameLcase}} {{.BasePackageName}}.{{.InterfaceName}}, wrappers ...ServerLayer ) {
	ctx := context.Background()
	f := func( path string, endp toEndpoint, dec httptransport.DecodeRequestFunc, enc httptransport.EncodeResponseFunc) {

		var mappedLayers []ep.Middleware
		for _, w := range wrappers {
			mappedLayers = append( mappedLayers, w( {{.InterfaceNameLcase}}, path ))
		}

		http.Handle(path,
			httptransport.NewServer(
				ctx,
				ep.Chain(epID, mappedLayers...)(endp({{.InterfaceNameLcase}})),
				dec,
				enc,
			),
		)
	}

	{{range .Methods}}
	f( {{.EndpointPackageName}}.Path{{.MethodName}}, make{{.MethodName}}Endpoint, decode{{.MethodName}}Request, encode{{.MethodName}}Response ){{end}}
}
