// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package transport

import (
	"time"

	{{range .ExtraImports}}
	{{.}}{{end}}

	"golang.org/x/net/context"

	"github.com/go-kit/kit/endpoint"

	{{range .ImportsWithoutTime}}{{.}}
	{{end}}

	"{{.BasePackage}}"
)

// {{.InterfaceName}} redeclaring the {{.InterfaceName}} here to forward it from the base package.
// this serves two purposes. It helps us reference it at this package level a
// little bit more easily, and it ensures that we are using the base package,
// {{.BasePackage}} that we imported here.
// We must import {{.BasePackage}}, as there may be types defined within it that
// the service uses.
type {{.InterfaceName}} interface {
	{{.BasePackageName}}.{{.InterfaceName}}
}

type client{{.InterfaceName}} struct {
	{{range .ExtraInterfaces}}{{.Type}}
	{{end}}
	{{range .Methods}}{{.MethodNameLcase}}Endpoint endpoint.Endpoint
	{{end}}
}

{{range .Methods}}
// {{.MethodName}} implements {{.BasePackage}}.{{.InterfaceName}}
func ({{.LocalName}} client{{.InterfaceName}}) {{.MethodName}}({{.MethodArguments}}) ({{.MethodResults}}) {
	ctx, _ := context.WithTimeout(context.Background(), time.Second)

	request := {{.MethodNameLcase}}Request{
		{{range .Params}}{{template "param" .}}
		{{end}}
	}

	request.embedMime = new(embedMime)

	response, err := {{.LocalName}}.{{.MethodNameLcase}}Endpoint(
		ctx,
		&request,
	)

	if err != nil {
		return
	}

	{{if .Results}}
	resp := response.(*{{.MethodNameLcase}}Response)

	{{range .Results}}{{.Name}} = resp.{{.PublicName}}
	{{end}}
	{{else}}
	_ = response.(*{{.MethodNameLcase}}Response)
	{{end}}

	return
}
{{end}}

{{define "param"}}{{.PublicName}}: {{.Name}},{{end}}