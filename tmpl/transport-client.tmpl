// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package http

import (
	"time"
	"errors"

	"golang.org/x/net/context"

	ep "github.com/go-kit/kit/endpoint"
	kitservice "github.com/go-kit/kit/service"

	{{range .ImportsWithoutTime}}{{.}}
	{{end}}
	{{range .ExtraImports}}
	{{.}}{{end}}

	{{.BasePackageImport}}
	"{{.EndpointPackage}}"
)

var _ {{.BasePackageName}}.{{.InterfaceName}}

// DefaultRequestTimeout represents an overwritable Request timeout.
var DefaultRequestTimeout = time.Second

type client{{.InterfaceName}} struct {
	{{range .ExtraInterfaces}}{{.Type}}
	{{end}}
	{{range .Methods}}{{.MethodNameLcase}}Endpoint ep.Endpoint
	{{end}}
}

// ErrMethodNotFound corresponds to a method that could not be found while
// looking for it with a call to Endpoint on a client{{.InterfaceName}}
var ErrMethodNotFound = errors.New("The provided method name was not found")

// Endpoint implements github.com/go-kit/kit/service.Service
func (client client{{.InterfaceName}}) Endpoint(method string) (ep.Endpoint, error) {
	switch method {
	{{range .Methods}}case endpoint.Path{{.MethodName}}, "{{.MethodName}}":
		return client.{{.MethodNameLcase}}Endpoint, nil
	{{end}}
	}

	{{range .ExtraInterfaces}}if svc, ok := client.{{.Name}}.(kitservice.Service); ok {
		ep, err := svc.Endpoint(method)
		if err == nil {
			return ep, nil
		}
	}
	{{end}}

	return nil, ErrMethodNotFound
}

{{range .Methods}}
// {{.MethodName}} implements {{.BasePackage}}.{{.InterfaceName}}
func ({{.LocalName}} client{{.InterfaceName}}) {{.MethodName}}({{.MethodArguments}}) ({{.MethodResults}}) {
	{{if .HasContextParam}}
	{{.ContextParamName}}, _ = context.WithTimeout({{.ContextParamName}}, DefaultRequestTimeout)
	{{else}}
	{{.ContextParamName}}, _ := context.WithTimeout(context.Background(), DefaultRequestTimeout)
	{{end}}

	_request := {{.MethodNameLcase}}Request{
		{{range .Params}}{{if .IsContext}}{{else}}{{template "param" .}}{{end}}
		{{end}}
	}

	_request.embedMime = new(embedMime)

	_response, err := {{.LocalName}}.{{.MethodNameLcase}}Endpoint(
		{{.ContextParamName}},
		&_request,
	)

	if err != nil {
		return
	}

	var ok bool
	err, ok = _response.(error)
	if ok {
		// we received an error from the server, so we'll return here.
		// if the Method has a return type named err, this will come through
		// it.
		return
	}

	{{if .Results}}
	_resp := _response.(*{{.MethodNameLcase}}Response)

	{{range .Results}}{{.Name}} = _resp.{{.PublicName}}
	{{end}}
	{{else}}
	_ = _response.(*{{.MethodNameLcase}}Response)
	{{end}}

	return
}
{{end}}

{{define "param"}}{{.PublicName}}: {{.Name}},{{end}}